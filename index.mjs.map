{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/defaults.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {boolean} [options.copy] - boolean indicating whether to return a new data structure\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'copy': true,\n*     'sep': '-',\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as deepGet } from '@stdlib/utils-deep-get';\nimport isArray from '@stdlib/assert-is-array';\nimport format from '@stdlib/string-format';\nimport defaults from './defaults.js';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Extracts a nested property value from each element of an object array.\n*\n* @param {Array} arr - source array\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {boolean} [options.copy=true] - boolean indicating whether to return a new data structure\n* @param {string} [options.sep=\".\"] - key path separator\n* @throws {TypeError} first argument must be an array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array} destination array\n*\n* @example\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a.b.c' );\n* // returns [ 1, 2 ]\n*\n* @example\n* var arr = [\n*     {'a':[0,1,2]},\n*     {'a':[3,4,5]}\n* ];\n*\n* var out = deepPluck( arr, ['a',1] );\n* // returns [ 1, 4 ]\n*\n* @example\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a.b.c', {'copy':false} );\n* // returns [ 1, 2 ]\n*\n* var bool = ( arr[ 0 ] === out[ 0 ] );\n* // returns true\n*\n* @example\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a|b|c', {'sep':'|'} );\n* // returns [ 1, 2 ]\n*/\nfunction deepPluck( arr, path, options ) {\n\tvar dget;\n\tvar opts;\n\tvar out;\n\tvar err;\n\tvar i;\n\n\tif ( !isArray( arr ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array. Value: `%s`.', arr ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.copy ) {\n\t\tout = new Array( arr.length );\n\t} else {\n\t\tout = arr;\n\t}\n\tdget = deepGet( path, {\n\t\t'sep': opts.sep\n\t});\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tout[ i ] = dget( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default deepPluck;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true,\n\t\t'sep': '.'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n"],"names":["validate","opts","options","isObject","hasOwnProp","copy","isBoolean","TypeError","format","sep","isString","deepPluck","arr","path","dget","out","err","i","isArray","arguments","length","Array","deepGet"],"mappings":";;8qBAoDA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAUD,GAGXE,EAAYF,EAAS,UACzBD,EAAKI,KAAOH,EAAQG,MACdC,EAAWL,EAAKI,OACd,IAAIE,UAAWC,EAAQ,+DAAgE,OAAQP,EAAKI,OAGxGD,EAAYF,EAAS,SACzBD,EAAKQ,IAAMP,EAAQO,KACbC,EAAUT,EAAKQ,MACb,IAAIF,UAAWC,EAAQ,8DAA+D,MAAOP,EAAKQ,MAGpG,KAdC,IAAIF,UAAWC,EAAQ,qEAAsEN,GAetG,CCcA,SAASS,EAAWC,EAAKC,EAAMX,GAC9B,IAAIY,EACAb,EACAc,EACAC,EACAC,EAEJ,IAAMC,EAASN,GACd,MAAM,IAAIL,UAAWC,EAAQ,kEAAmEI,IAGjG,GADAX,EChEO,CACNI,MAAQ,EACRI,IAAO,KD+DHU,UAAUC,OAAS,IACvBJ,EAAMhB,EAAUC,EAAMC,IAErB,MAAMc,EAWR,IAPCD,EADId,EAAKI,KACH,IAAIgB,MAAOT,EAAIQ,QAEfR,EAEPE,EAAOQ,EAAST,EAAM,CACrBJ,IAAOR,EAAKQ,MAEPQ,EAAI,EAAGA,EAAIL,EAAIQ,OAAQH,IAC5BF,EAAKE,GAAMH,EAAMF,EAAKK,IAEvB,OAAOF,CACR"}